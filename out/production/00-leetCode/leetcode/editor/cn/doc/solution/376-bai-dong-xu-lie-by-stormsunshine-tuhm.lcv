# 前言

为方便表述，定义末尾元素递增的摆动子序列和末尾元素递减的摆动子序列，定义如下。

1. 长度为 $1$ 的子序列同时为末尾元素递增和末尾元素递减的摆动子序列。

2. 对于长度大于 $1$ 的摆动子序列，如果最后一个元素大于倒数第二个元素则是末尾元素递增的摆动子序列，如果最后一个元素小于倒数第二个元素则是末尾元素递减的摆动子序列。

# 解法一

## 思路和算法

用 $n$ 表示数组 $\textit{nums}$ 的长度。由于 $n \ge 1$，因此最长摆动子序列的长度不小于 $1$。

当 $i > 0$ 时，对于每个 $0 \le j < i$，假设以下标 $j$ 结尾的最长摆动子序列已知，需要判断是否可以将 $\textit{nums}[i]$ 拼接到 $\textit{nums}[j]$ 的后面得到更长的摆动子序列。以下两种情况可以得到更长的摆动子序列。

- 如果 $\textit{nums}[i] > \textit{nums}[j]$，则对于以 $\textit{nums}[j]$ 结尾的末尾元素递减的摆动子序列，将 $\textit{nums}[i]$ 拼接到 $\textit{nums}[j]$ 的后面可以得到更长的末尾元素递增的摆动子序列。

- 如果 $\textit{nums}[i] < \textit{nums}[j]$，则对于以 $\textit{nums}[j]$ 结尾的末尾元素递增的摆动子序列，将 $\textit{nums}[i]$ 拼接到 $\textit{nums}[j]$ 的后面可以得到更长的末尾元素递减的摆动子序列。

为了计算最长摆动子序列的长度，对于每个 $0 \le i < n$ 需要分别计算以下标 $i$ 结尾的两种情况的最长摆动子序列的长度，然后寻找整个数组中的最长摆动子序列的长度，即可得到答案。

由于当 $i > 0$ 时，可以首先计算 $0 \le j < i$ 的所有以下标 $j$ 结尾的最长摆动子序列的长度，然后计算以下标 $i$ 结尾的最长摆动子序列的长度，因此可以使用动态规划计算以每个下标结尾的最长摆动子序列的长度。

由于以每个下标结尾的最长摆动子序列有两种情况，因此需要创建两个长度为 $n$ 的数组 $\textit{dpIncrease}$ 和 $\textit{dpDecrease}$，其中 $\textit{dpIncrease}[i]$ 为以下标 $i$ 结尾且末尾元素递增的最长摆动子序列的长度，$\textit{dpDecrease}[i]$ 为以下标 $i$ 结尾且末尾元素递减的最长摆动子序列的长度。

当 $i = 0$ 时，以下标 $i$ 结尾的子序列只有一个，长度为 $1$，同时为末尾元素递增和末尾元素递减的摆动子序列，因此动态规划的边界情况是 $\textit{dpIncrease}[0] = \textit{dpDecrease}[0] = 1$。

当 $i > 0$ 时，对于所有 $0 \le j < i$，需要比较 $\textit{nums}[i]$ 和 $\textit{nums}[j]$ 的大小，计算 $\textit{dpIncrease}[i]$ 和 $\textit{dpDecrease}[i]$。计算方法如下。

- 如果 $\textit{nums}[i] > \textit{nums}[j]$，则当前以下标 $i$ 结尾且末尾元素递增的最长摆动子序列的长度是 $\textit{dpDecrease}[j] + 1$，如果 $\textit{dpDecrease}[j] + 1 > \textit{dpIncrease}[i]$ 则将 $\textit{dpIncrease}[i]$ 更新为 $\textit{dpDecrease}[j] + 1$。

- 如果 $\textit{nums}[i] < \textit{nums}[j]$，则当前以下标 $i$ 结尾且末尾元素递减的最长摆动子序列的长度是 $\textit{dpIncrease}[j] + 1$，如果 $\textit{dpIncrease}[j] + 1 > \textit{dpDecrease}[i]$ 则将 $\textit{dpDecrease}[i]$ 更新为 $\textit{dpIncrease}[j] + 1$。

- 如果 $\textit{nums}[i] = \textit{nums}[j]$，则当前以下标 $i$ 结尾的最长摆动子序列的长度是 $1$。可以将 $\textit{dpIncrease}$ 和 $\textit{dpDecrease}$ 中的所有元素初始化为 $1$，确保最长摆动子序列的长度不小于 $1$。

因此动态规划的状态转移方程如下。

- 对于所有满足 $0 \le j < i$ 且 $\textit{nums}[j] < \textit{nums}[i]$ 的下标 $j$，$\textit{dpIncrease}[i] = \max \{\textit{dpDecrease}[j]\} + 1$。如果不存在满足 $0 \le j < i$ 且 $\textit{nums}[j] < \textit{nums}[i]$ 的下标 $j$，则 $\textit{dpIncrease}[i] = 1$。

- 对于所有满足 $0 \le j < i$ 且 $\textit{nums}[j] > \textit{nums}[i]$ 的下标 $j$，$\textit{dpDecrease}[i] = \max \{\textit{dpIncrease}[j]\} + 1$。如果不存在满足 $0 \le j < i$ 且 $\textit{nums}[j] > \textit{nums}[i]$ 的下标 $j$，则 $\textit{dpDecrease}[i] = 1$。

由于每一项依赖于前一项，因此应从小到大遍历每个 $i$ 并计算 $\textit{dpIncrease}[i]$ 和 $\textit{dpDecrease}[i]$。计算得到 $\textit{dpIncrease}$ 和 $\textit{dpDecrease}$ 中的所有状态值之后，其中的最大值即为最长摆动子序列的长度。

## 代码

* [sol1-Java]

```Java
class Solution {
    public int wiggleMaxLength(int[] nums) {
        int maxLength = 1;
        int n = nums.length;
        int[] dpIncrease = new int[n];
        int[] dpDecrease = new int[n];
        Arrays.fill(dpIncrease, 1);
        Arrays.fill(dpDecrease, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dpIncrease[i] = Math.max(dpIncrease[i], dpDecrease[j] + 1);
                } else if (nums[i] < nums[j]) {
                    dpDecrease[i] = Math.max(dpDecrease[i], dpIncrease[j] + 1);
                }
            }
            maxLength = Math.max(maxLength, Math.max(dpIncrease[i], dpDecrease[i]));
        }
        return maxLength;
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    public int WiggleMaxLength(int[] nums) {
        int maxLength = 1;
        int n = nums.Length;
        int[] dpIncrease = new int[n];
        int[] dpDecrease = new int[n];
        Array.Fill(dpIncrease, 1);
        Array.Fill(dpDecrease, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dpIncrease[i] = Math.Max(dpIncrease[i], dpDecrease[j] + 1);
                } else if (nums[i] < nums[j]) {
                    dpDecrease[i] = Math.Max(dpDecrease[i], dpIncrease[j] + 1);
                }
            }
            maxLength = Math.Max(maxLength, Math.Max(dpIncrease[i], dpDecrease[i]));
        }
        return maxLength;
    }
}
```

## 复杂度分析

- 时间复杂度：$O(n^2)$，其中 $n$ 是数组 $\textit{nums}$ 的长度。状态数是 $O(n)$，每个状态的计算时间是 $O(n)$，因此时间复杂度是 $O(n^2)$。

- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\textit{nums}$ 的长度。需要创建两个长度为 $n$ 的数组。

# 解法二

## 思路和算法

解法一的时间复杂度是 $O(n^2)$，因为每个状态的计算时间是 $O(n)$。可以更改状态定义，降低每个状态的计算时间。

创建两个长度为 $n$ 的数组 $\textit{dpIncrease}$ 和 $\textit{dpDecrease}$，其中 $\textit{dpIncrease}[i]$ 为结束下标小于等于 $i$ 且末尾元素递增的最长摆动子序列的长度，$\textit{dpDecrease}[i]$ 为结束下标小于等于 $i$ 且末尾元素递减的最长摆动子序列的长度。

当 $i = 0$ 时，结束下标小于等于 $i$ 的子序列只有一个，长度为 $1$，同时为末尾元素递增和末尾元素递减的摆动子序列，因此动态规划的边界情况是 $\textit{dpIncrease}[0] = \textit{dpDecrease}[0] = 1$。

当 $i > 0$ 时，根据状态定义，必有 $\textit{dpIncrease}[i] \ge \textit{dpIncrease}[i - 1]$，$\textit{dpDecrease}[i] \ge \textit{dpDecrease}[i - 1]$。需要比较 $\textit{nums}[i]$ 和 $\textit{nums}[i - 1]$ 的大小，计算 $\textit{dpIncrease}[i]$ 和 $\textit{dpDecrease}[i]$。

计算 $\textit{dpIncrease}[i]$ 的方法如下。

- 如果 $\textit{nums}[i] \le \textit{nums}[i - 1]$，则 $\textit{dpIncrease}[i] = \textit{dpIncrease}[i - 1]$。对于任何一个以 $\textit{nums}[i]$ 结尾且末尾元素递增的摆动子序列，将摆动子序列的末尾元素替换成 $\textit{nums}[i - 1]$ 之后仍为摆动子序列，因此 $\textit{dpIncrease}[i] \le \textit{dpIncrease}[i - 1]$。结合 $\textit{dpIncrease}[i] \le \textit{dpIncrease}[i - 1]$ 与 $\textit{dpIncrease}[i] \ge \textit{dpIncrease}[i - 1]$ 得到 $\textit{dpIncrease}[i] = \textit{dpIncrease}[i - 1]$。

- 如果 $\textit{nums}[i] > \textit{nums}[i - 1]$，则 $\textit{dpIncrease}[i] = \max(\textit{dpIncrease}[i - 1], \textit{dpDecrease}[i - 1] + 1)$。对于任何一个结束下标小于等于 $i - 1$ 且末尾元素递减的摆动子序列，如果摆动子序列的末尾元素大于 $\textit{nums}[i - 1]$，则将摆动子序列的末尾元素替换成 $\textit{nums}[i - 1]$ 之后仍为摆动子序列，因此一定存在结束下标小于等于 $i - 1$ 且末尾元素递减的摆动子序列的末尾元素小于等于 $\textit{nums}[i - 1]$，$\textit{dpIncrease}[i] \ge \textit{dpDecrease}[i - 1] + 1$。结合 $\textit{dpIncrease}[i] \ge \textit{dpIncrease}[i - 1]$ 与 $\textit{dpIncrease}[i] \ge \textit{dpDecrease}[i - 1] + 1$ 得到 $\textit{dpIncrease}[i] = \max(\textit{dpIncrease}[i - 1], \textit{dpDecrease}[i - 1] + 1)$。

计算 $\textit{dpDecrease}[i]$ 的方法如下。

- 如果 $\textit{nums}[i] \ge \textit{nums}[i - 1]$，则 $\textit{dpDecrease}[i] = \textit{dpDecrease}[i - 1]$。对于任何一个以 $\textit{nums}[i]$ 结尾且末尾元素递减的摆动子序列，将摆动子序列的末尾元素替换成 $\textit{nums}[i - 1]$ 之后仍为摆动子序列，因此 $\textit{dpDecrease}[i] \le \textit{dpDecrease}[i - 1]$。结合 $\textit{dpDecrease}[i] \le \textit{dpDecrease}[i - 1]$ 与 $\textit{dpDecrease}[i] \ge \textit{dpDecrease}[i - 1]$ 得到 $\textit{dpDecrease}[i] = \textit{dpDecrease}[i - 1]$。

- 如果 $\textit{nums}[i] < \textit{nums}[i - 1]$，则 $\textit{dpDecrease}[i] = \max(\textit{dpDecrease}[i - 1], \textit{dpIncrease}[i - 1] + 1)$。对于任何一个结束下标小于等于 $i - 1$ 且末尾元素递增的摆动子序列，如果摆动子序列的末尾元素小于 $\textit{nums}[i - 1]$，则将摆动子序列的末尾元素替换成 $\textit{nums}[i - 1]$ 之后仍为摆动子序列，因此一定存在结束下标小于等于 $i - 1$ 且末尾元素递增的摆动子序列的末尾元素大于等于 $\textit{nums}[i - 1]$，$\textit{dpDecrease}[i] \ge \textit{dpIncrease}[i - 1] + 1$。结合 $\textit{dpDecrease}[i] \ge \textit{dpDecrease}[i - 1]$ 与 $\textit{dpDecrease}[i] \ge \textit{dpIncrease}[i - 1] + 1$ 得到 $\textit{dpDecrease}[i] = \max(\textit{dpDecrease}[i - 1], \textit{dpIncrease}[i - 1] + 1)$。

因此动态规划的状态转移方程如下。

- 如果 $\textit{nums}[i] > \textit{nums}[i - 1]$，则 $\textit{dpIncrease}[i] = \max(\textit{dpIncrease}[i - 1], \textit{dpDecrease}[i - 1] + 1)$，$\textit{dpDecrease}[i] = \textit{dpDecrease}[i - 1]$。

- 如果 $\textit{nums}[i] < \textit{nums}[i - 1]$，则 $\textit{dpIncrease}[i] = \textit{dpIncrease}[i - 1]$，$\textit{dpDecrease}[i] = \max(\textit{dpDecrease}[i - 1], \textit{dpIncrease}[i - 1] + 1)$。

- 如果 $\textit{nums}[i] = \textit{nums}[i - 1]$，则 $\textit{dpIncrease}[i] = \textit{dpIncrease}[i - 1]$，$\textit{dpDecrease}[i] = \textit{dpDecrease}[i - 1]$。

由于每一项依赖于前一项，因此应从小到大遍历每个 $i$ 并计算 $\textit{dpIncrease}[i]$ 和 $\textit{dpDecrease}[i]$。计算得到 $\textit{dpIncrease}$ 和 $\textit{dpDecrease}$ 中的所有状态值之后，其中的最大值即为最长摆动子序列的长度。

上述做法的时间复杂度和空间复杂度都是 $O(n)$。

实现方面，由于 $\textit{dpIncrease}[i]$ 和 $\textit{dpDecrease}[i]$ 只取决于 $\textit{dpIncrease}[i - 1]$ 和 $\textit{dpDecrease}[i - 1]$，和更早的状态无关，因此可以使用滚动数组的思想，只保留 $\textit{dpIncrease}$ 和 $\textit{dpDecrease}$ 的前一项，将空间复杂度降到 $O(1)$。

## 代码

下面的代码为不优化空间的实现。

* [sol2_1-Java]

```Java
class Solution {
    public int wiggleMaxLength(int[] nums) {
        int maxLength = 1;
        int n = nums.length;
        int[] dpIncrease = new int[n];
        int[] dpDecrease = new int[n];
        dpIncrease[0] = 1;
        dpDecrease[0] = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1]) {
                dpIncrease[i] = Math.max(dpIncrease[i - 1], dpDecrease[i - 1] + 1);
                dpDecrease[i] = dpDecrease[i - 1];
            } else if (nums[i] < nums[i - 1]) {
                dpIncrease[i] = dpIncrease[i - 1];
                dpDecrease[i] = Math.max(dpDecrease[i - 1], dpIncrease[i - 1] + 1);
            } else {
                dpIncrease[i] = dpIncrease[i - 1];
                dpDecrease[i] = dpDecrease[i - 1];
            }
            maxLength = Math.max(maxLength, Math.max(dpIncrease[i], dpDecrease[i]));
        }
        return maxLength;
    }
}
```

* [sol2_1-C#]

```C#
public class Solution {
    public int WiggleMaxLength(int[] nums) {
        int maxLength = 1;
        int n = nums.Length;
        int[] dpIncrease = new int[n];
        int[] dpDecrease = new int[n];
        dpIncrease[0] = 1;
        dpDecrease[0] = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1]) {
                dpIncrease[i] = Math.Max(dpIncrease[i - 1], dpDecrease[i - 1] + 1);
                dpDecrease[i] = dpDecrease[i - 1];
            } else if (nums[i] < nums[i - 1]) {
                dpIncrease[i] = dpIncrease[i - 1];
                dpDecrease[i] = Math.Max(dpDecrease[i - 1], dpIncrease[i - 1] + 1);
            } else {
                dpIncrease[i] = dpIncrease[i - 1];
                dpDecrease[i] = dpDecrease[i - 1];
            }
            maxLength = Math.Max(maxLength, Math.Max(dpIncrease[i], dpDecrease[i]));
        }
        return maxLength;
    }
}
```

下面的代码为优化空间的实现。

* [sol2_2-Java]

```Java
class Solution {
    public int wiggleMaxLength(int[] nums) {
        int maxLength = 1;
        int n = nums.length;
        int dpIncrease = 1;
        int dpDecrease = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1]) {
                dpIncrease = Math.max(dpIncrease, dpDecrease + 1);
            } else if (nums[i] < nums[i - 1]) {
                dpDecrease = Math.max(dpDecrease, dpIncrease + 1);
            }
            maxLength = Math.max(maxLength, Math.max(dpIncrease, dpDecrease));
        }
        return maxLength;
    }
}
```

* [sol2_2-C#]

```C#
public class Solution {
    public int WiggleMaxLength(int[] nums) {
        int maxLength = 1;
        int n = nums.Length;
        int dpIncrease = 1;
        int dpDecrease = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1]) {
                dpIncrease = Math.Max(dpIncrease, dpDecrease + 1);
            } else if (nums[i] < nums[i - 1]) {
                dpDecrease = Math.Max(dpDecrease, dpIncrease + 1);
            }
            maxLength = Math.Max(maxLength, Math.Max(dpIncrease, dpDecrease));
        }
        return maxLength;
    }
}
```

## 复杂度分析

- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\textit{nums}$ 的长度。状态数是 $O(n)$，每个状态的计算时间是 $O(1)$，因此时间复杂度是 $O(n)$。

- 空间复杂度：$O(n)$ 或 $O(1)$，其中 $n$ 是数组 $\textit{nums}$ 的长度。空间复杂度取决于实现方式，不优化空间的实现需要创建两个长度为 $n$ 的数组因此空间复杂度是 $O(n)$，优化空间的实现的空间复杂度是 $O(1)$。

# 解法三

## 思路和算法

定义单调递增子数组和单调递减子数组如下。

对于下标范围 $[\textit{left}, \textit{right}]$ 的子数组，其中 $\textit{left} < \textit{right}$，如果同时满足以下条件，则是单调递增子数组。

- 对于任意 $\textit{left} \le i < \textit{right}$，$\textit{nums}[i] \le \textit{nums}[i + 1]$。

- 至少存在一个 $\textit{left} \le i < \textit{right}$ 的下标 $i$ 满足 $\textit{nums}[i] < \textit{nums}[i + 1]$。

对于下标范围 $[\textit{left}, \textit{right}]$ 的子数组，其中 $\textit{left} < \textit{right}$，如果同时满足以下条件，则是单调递减子数组。

- 对于任意 $\textit{left} \le i < \textit{right}$，$\textit{nums}[i] \ge \textit{nums}[i + 1]$。

- 至少存在一个 $\textit{left} \le i < \textit{right}$ 的下标 $i$ 满足 $\textit{nums}[i] > \textit{nums}[i + 1]$。

如果数组 $\textit{nums}$ 中的所有元素都相等，则最长摆动子序列的长度是 $1$。如果数组 $\textit{nums}$ 中的元素不完全相等，则可以将数组 $\textit{nums}$ 分成多个单调子数组，满足以下条件。

1. 首个单调子数组的开始下标是 $0$，末尾单调子数组的结束下标是 $n - 1$。

2. 对于相邻的两个单调子数组，前一个单调子数组的结束下标为后一个单调子数组的开始下标。

3. 相邻的两个单调子数组的单调性相反。

对于满足 $0 < i < n - 1$ 的下标 $i$，如果 $i$ 是一个单调子数组的开始下标则 $i$ 也是前一个单调子数组的结束下标，如果 $i$ 是一个单调子数组的结束下标则 $i$ 也是后一个单调子数组的开始下标。

如果在同一个单调子数组中选取三个元素，则这三个元素的大小关系不符合摆动序列的要求，因此同一个单调子数组中最多有两个元素在摆动序列中。选取每个单调子数组的开始下标和结束下标，当同一个下标只选取一次时，得到最长摆动子序列，其长度为单调子数组的个数加 $1$。不可能得到长度更大的摆动子序列。

因此问题转化成计算数组 $\textit{nums}$ 中的单调子数组个数，单调子数组个数加 $1$ 即为答案。

该思想为贪心思想，具体做法如下。

用 $\textit{maxLength}$ 表示最长摆动子序列的长度，用 $\textit{prevDiff}$ 表示上次计算的相邻元素之差，初始时 $\textit{maxLength} = 1$，$\textit{prevDiff} = 0$。从下标 $1$ 开始从左到右遍历数组 $\textit{nums}$，遍历到下标 $i$ 时，执行如下操作。

1. 计算相邻元素之差 $\textit{currDiff} = \textit{nums}[i] - \textit{nums}[i - 1]$。

2. 当 $\textit{currDiff} \ne 0$ 时，如果 $\textit{prevDiff} = 0$ 或 $\textit{currDiff}$ 和 $\textit{prevDiff}$ 的正负性不同，则下标 $i - 1$ 是一个单调子数组的开始下标（对于 $i = 1$ 也成立），将 $\textit{maxLength}$ 的值加 $1$，将 $\textit{prevDiff}$ 的值更新为 $\textit{currDiff}$ 的值。

由于 $\textit{maxLength}$ 的初始值是 $1$，每次遇到单调子数组的开始下标时将 $\textit{maxLength}$ 的值加 $1$，因此遍历结束之后，$\textit{maxLength}$ 为最长摆动子序列的长度。

## 代码

* [sol3-Java]

```Java
class Solution {
    public int wiggleMaxLength(int[] nums) {
        int maxLength = 1;
        int prevDiff = 0;
        int n = nums.length;
        for (int i = 1; i < n; i++) {
            int currDiff = nums[i] - nums[i - 1];
            if (currDiff > 0 && prevDiff <= 0 || currDiff < 0 && prevDiff >= 0) {
                maxLength++;
                prevDiff = currDiff;
            }
        }
        return maxLength;
    }
}
```

* [sol3-C#]

```C#
public class Solution {
    public int WiggleMaxLength(int[] nums) {
        int maxLength = 1;
        int prevDiff = 0;
        int n = nums.Length;
        for (int i = 1; i < n; i++) {
            int currDiff = nums[i] - nums[i - 1];
            if (currDiff > 0 && prevDiff <= 0 || currDiff < 0 && prevDiff >= 0) {
                maxLength++;
                prevDiff = currDiff;
            }
        }
        return maxLength;
    }
}
```

## 复杂度分析

- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\textit{nums}$ 的长度。需要遍历数组一次。

- 空间复杂度：$O(1)$。

