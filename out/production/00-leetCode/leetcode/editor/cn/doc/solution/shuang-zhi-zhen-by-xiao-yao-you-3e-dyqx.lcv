### 解题思路

本题没有要求空间复杂度，所以可以针对该题创建一个新的数组用于存放平方数，且由于该数组是一个非递减数组且存在负数，所以平方之后，会呈现先\/的趋势，从小到大的求平方数实属不智，可以从大到小求平方数，再将数值从新数组的结尾向前添加。这里就涉及负数和正数的平方数比较，可以使用对向双指针，一个指向负数最小（数组头，有无正负不影响，只是便于理解），一个指向正数最大（数组结尾），依次比较，谁大加入新数组，且相应指针朝**对向**前进，直到相遇，此时添加左右均可。

class Solution {
public int[] sortedSquares(int[] nums) {
int length=nums.length;
int[] number=new int[length];//存放平方数组
int left=0;
int right=length-1;
int index=length-1;//平方数组未确定大小的最大索引处
while(left<=right){
if(nums[left]*nums[left]>nums[right]*nums[right]){
number[index]=nums[left]*nums[left];
index--;
left++;
}
else if(nums[left]*nums[left]<=nums[right]*nums[right]){
number[index]=nums[right]*nums[right];
index--;
right--;
}
}
return number;

    }

}

* 

```
```

