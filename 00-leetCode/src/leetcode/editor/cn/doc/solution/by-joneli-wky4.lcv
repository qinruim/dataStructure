# 解题思路

1. 遍历字符串`s`

2. 每当遇到`'('`时，将其**入栈**

3. 每当遇到`')'`时，计算这个`')'`与栈顶第一个`'('`之间的值`scoreCnt`（栈顶有两种情况）

- 栈顶只有`'('`时，`scoreCnt = 1`

- 栈顶有`'('`和一个值`n`时，`scoreCnt = 2 * n`

4. 将对应的`'('`和可能存在的值`n`**出栈**

5. 此时栈顶依然有两种情况

- 栈顶只有`'('`时，直接将`scoreCnt`**入栈**即可

- 栈顶有`'('`和一个值`n`时，将`scoreCnt`与`n`**合并**

6. 由于字符串`s`中`'('`和`')'`是一一对应的，最后栈中只会剩下最终的值`ans`

# 其他细节

**不需要判断栈中是否有元素的原因 ：**
由于字符串`s`中`'('`和`')'`是一一对应的，所以在遍历到`')'`时，栈中一定有与之对应的`'('`，唯一需要考虑的是第一个`'('`，在计算完第一个`'('`和与之对应的`')'`中间的值`scoreCnt`后，根据上面**第4条**的情况，会去判断栈顶的情况，但此时栈空，所以只需要在最开始的时候入栈一个额外的`(`就能解决

**由于**`scoreCnt`不会为0，所以我们可以用数字`0`来代表`'('`

# 代码

* 

```
public int scoreOfParentheses (String s)
{
    Deque<Integer> stack = new ArrayDeque<>(); 
    stack.push(0);//添加额外的0
        
    int scoreCnt;
        
    for (int i = 0; i < s.length(); i++)//遍历字符串s
    {
        if (s.charAt(i) == '(')//遇到'('时，将其入栈
        {
            stack.push(0);
        }
        else//遇到')'时
        {
            scoreCnt = stack.peek() == 0 ? 1 : 2 * stack.pop();//计算scoreCnt
            stack.pop();//将对应的'('出栈
            stack.push(stack.peek() == 0 ? scoreCnt : scoreCnt + stack.pop());//将scoreCnt入栈
        }
    }
    return stack.peek();
}
```

