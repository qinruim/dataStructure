## 前置知识：动态规划入门

[动态规划入门：从记忆化搜索到递推【基础算法精讲 17】](https://www.bilibili.com/video/BV1Xj411K7oF/)

## 一、启发思考：寻找子问题

为了方便后面改成递推，我们从下往上移动。

对于示例 1，思考「第一步」要怎么走。

假设从最后一排的 $\textit{matrix}[2][1]=8$ 出发：

- 往左上方走一步，问题变成从 $\textit{matrix}[1][0]=6$ 出发，向上走到第一排的路径最小和。
- 往正上方走一步，问题变成从 $\textit{matrix}[1][1]=5$ 出发，向上走到第一排的路径最小和。
- 往右上方走一步，问题变成从 $\textit{matrix}[1][2]=4$ 出发，向上走到第一排的路径最小和。

由于这些都是**和原问题相似的、规模更小的子问题**，所以可以用**递归**解决。

> 注：动态规划有「选或不选」和「枚举选哪个」这两种基本思考方式。在做题时，可根据题目要求，选择适合题目的一种来思考。本题用到的是「枚举选哪个」。

## 二、递归怎么写：状态定义与状态转移方程

由于每个子问题计算的都是从某个格子出发的路径最小和，不妨定义 $\textit{dfs}(r,c)$ 表示从 $\textit{matrix}[r][c]$ 出发，向上走到第一排的路径最小和。

考虑往哪个方向走一步：

- 往左上方走一步，问题变成从 $\textit{matrix}[r-1][c-1]$ 出发，向上走到第一排的路径最小和。
- 往正上方走一步，问题变成从 $\textit{matrix}[r-1][c]$ 出发，向上走到第一排的路径最小和。
- 往右上方走一步，问题变成从 $\textit{matrix}[r-1][c+1]$ 出发，向上走到第一排的路径最小和。

这三种情况取最小值，加上 $\textit{matrix}[r][c]$，就得到了 $\textit{dfs}(r,c)$。写成式子就是

$$
\textit{dfs}(r,c) = \min(\textit{dfs}(r-1,c-1),\textit{dfs}(r-1,c),\textit{dfs}(r-1,c+1)) + \textit{matrix}[r][c]
$$

递归边界：$\textit{dfs}(0,c)=\textit{matrix}[0][c]$ 以及 $\textit{dfs}(r,-1)=\textit{dfs}(r,n)=\infty$，出界是不合法的，设置成无穷大，这样取 $\min$ 的时候就会自动忽略不合法的情况。

递归入口：$\textit{dfs}(n-1,c)$，遍历所有 $c$，取最小值，即为答案。

* [sol-Python3]

```py
# 会超时的递归代码
class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        # dfs(r, c) 表示从 matrix[r][c] 出发，向上走到第一行的最小路径和
        def dfs(r: int, c: int) -> int:
            if c < 0 or c >= n:  # 出界
                return inf
            if r == 0:  # 到达第一行
                return matrix[0][c]
            return min(dfs(r - 1, c - 1), dfs(r - 1, c), dfs(r - 1, c + 1)) + matrix[r][c]
        return min(dfs(n - 1, i) for i in range(n))  # 枚举起点，取最小值
```

* [sol-Java]

```java
// 会超时的递归代码
class Solution {
    private int[][] matrix;

    public int minFallingPathSum(int[][] matrix) {
        this.matrix = matrix;
        int n = matrix.length;
        int ans = Integer.MAX_VALUE;
        for (int c = 0; c < n; c++)
            ans = Math.min(ans, dfs(n - 1, c));
        return ans;
    }

    private int dfs(int r, int c) {
        if (c < 0 || c >= matrix.length) return Integer.MAX_VALUE; // 出界
        if (r == 0) return matrix[0][c]; // 到达第一行
        return Math.min(Math.min(dfs(r - 1, c - 1), dfs(r - 1, c)), dfs(r - 1, c + 1)) + matrix[r][c];
    }
}
```

* [sol-C++]

```cpp
// 会超时的递归代码
class Solution {
public:
    int minFallingPathSum(vector<vector<int>> &matrix) {
        int n = matrix.size();
        function<int(int, int)> dfs = [&](int r, int c) -> int {
            if (c < 0 || c >= n) return INT_MAX; // 出界
            if (r == 0) return matrix[0][c]; // 到达第一行
            return min(min(dfs(r - 1, c - 1), dfs(r - 1, c)), dfs(r - 1, c + 1)) + matrix[r][c];
        };
        int ans = INT_MAX;
        for (int c = 0; c < n; c++)
            ans = min(ans, dfs(n - 1, c));
        return ans;
    }
};
```

* [sol-Go]

```go
// 会超时的递归代码
func minFallingPathSum(matrix [][]int) int {
    n := len(matrix)
    var dfs func(int, int) int
    dfs = func(r, c int) int {
        if c < 0 || c >= n { // 出界
            return math.MaxInt
        }
        if r == 0 { // 到达第一行
            return matrix[0][c]
        }
        return min(min(dfs(r-1, c-1), dfs(r-1, c)), dfs(r-1, c+1)) + matrix[r][c]
    }
    ans := math.MaxInt
    for c := 0; c < n; c++ {
        ans = min(ans, dfs(n-1, c))
    }
    return ans
}

func min(a, b int) int { if b < a { return b }; return a }
```

* [sol-JavaScript]

```js
// 会超时的递归代码
var minFallingPathSum = function (matrix) {
    const n = matrix.length;
    function dfs(r, c) {
        if (c < 0 || c >= n) return Number.MAX_SAFE_INTEGER; // 出界
        if (r === 0) return matrix[0][c]; // 到达第一行
        return Math.min(dfs(r - 1, c - 1), dfs(r - 1, c), dfs(r - 1, c + 1)) + matrix[r][c];
    }

    let ans = Number.MAX_SAFE_INTEGER;
    for (let c = 0; c < n; c++)
        ans = Math.min(ans, dfs(n - 1, c));
    return ans;
};
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n3^n)$，其中 $n$ 为 $\textit{matrix}$ 的长度。搜索树可以近似为一棵三叉树，树高为 $\mathcal{O}(n)$，所以节点个数至多为 $\mathcal{O}(3^n)$。从 $n$ 个起点出发递归，所以总的时间复杂度为 $\mathcal{O}(n3^n)$。
- 空间复杂度：$\mathcal{O}(n)$。递归需要 $\mathcal{O}(n)$ 的栈空间。

## 三、递归 + 记录返回值 = 记忆化搜索

上面的做法太慢了，怎么优化呢？

由于有多种方式可以移动到同一个格子，那么整个递归中必然有大量重复递归调用（递归入参相同）。由于递归函数没有副作用，同样的入参无论计算多少次，算出来的结果都是一样的，因此可以用**记忆化搜索**来优化：

- 如果一个状态（递归入参）是第一次遇到，那么可以在返回前，把状态及其结果记到一个 $\textit{memo}$ 数组（或哈希表）中。
- 如果一个状态不是第一次遇到（$\textit{memo}$ 中保存的结果不等于 $\textit{memo}$ 的初始值），那么可以直接返回 $\textit{memo}$ 中保存的结果。

请注意：$\textit{memo}$ 数组的**初始值**一定不能等于要记忆化的值！例如初始值设置为 $0$，并且要记忆化的 $\textit{dfs}(r,c)$ 也等于 $0$，那就没法判断 $0$ 到底表示第一次遇到这个状态，还是表示之前遇到过了。初始值一般设为 $-1$，但是本题 $\textit{matrix}[i][j]$ 可以为负数，那么初始值可以改成一个很大或者很小的数。

> Python 用户可以无视上面这段，直接用 `@cache` 装饰器。

* [sol-Python3]

```py
class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        # dfs(r, c) 表示从 matrix[r][c] 出发，向上走到第一行的最小路径和
        @cache  # 记忆化搜索
        def dfs(r: int, c: int) -> int:
            if c < 0 or c >= n:  # 出界
                return inf
            if r == 0:  # 到达第一行
                return matrix[0][c]
            return min(dfs(r - 1, c - 1), dfs(r - 1, c), dfs(r - 1, c + 1)) + matrix[r][c]
        return min(dfs(n - 1, i) for i in range(n))  # 枚举起点，取最小值
```

* [sol-Java]

```java
class Solution {
    private int[][] matrix, memo;

    public int minFallingPathSum(int[][] matrix) {
        this.matrix = matrix;
        int n = matrix.length;
        memo = new int[n][n];
        for (int i = 0; i < n; i++)
            Arrays.fill(memo[i], Integer.MIN_VALUE);

        int ans = Integer.MAX_VALUE;
        for (int c = 0; c < n; c++)
            ans = Math.min(ans, dfs(n - 1, c));
        return ans;
    }

    private int dfs(int r, int c) {
        if (c < 0 || c >= matrix.length) return Integer.MAX_VALUE; // 出界
        if (r == 0) return matrix[0][c]; // 到达第一行
        if (memo[r][c] != Integer.MIN_VALUE) return memo[r][c]; // 之前算过了
        return memo[r][c] = Math.min(Math.min(
                dfs(r - 1, c - 1), dfs(r - 1, c)), dfs(r - 1, c + 1)) + matrix[r][c];
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int minFallingPathSum(vector<vector<int>> &matrix) {
        int n = matrix.size(), memo[n][n];
        memset(memo, 0x3f, sizeof(memo));
        function<int(int, int)> dfs = [&](int r, int c) -> int {
            if (c < 0 || c >= n) return INT_MAX; // 出界
            if (r == 0) return matrix[0][c]; // 到达第一行
            int &res = memo[r][c]; // 注意这里是引用，下面会直接修改 memo[r][c]
            if (res != 0x3f3f3f3f) return res; // 之前算过了
            return res = min(min(dfs(r - 1, c - 1), dfs(r - 1, c)), dfs(r - 1, c + 1)) + matrix[r][c];
        };
        int ans = INT_MAX;
        for (int c = 0; c < n; c++)
            ans = min(ans, dfs(n - 1, c));
        return ans;
    }
};
```

* [sol-Go]

```go
func minFallingPathSum(matrix [][]int) int {
    n := len(matrix)
    memo := make([][]int, n)
    for i := range memo {
        memo[i] = make([]int, n)
        for j := range memo[i] {
            memo[i][j] = math.MinInt
        }
    }
    var dfs func(int, int) int
    dfs = func(r, c int) int {
        if c < 0 || c >= n { // 出界
            return math.MaxInt
        }
        if r == 0 { // 到达第一行
            return matrix[0][c]
        }
        p := &memo[r][c]
        if *p != math.MinInt { // 之前算过了
            return *p
        }
        *p = min(min(dfs(r-1, c-1), dfs(r-1, c)), dfs(r-1, c+1)) + matrix[r][c]
        return *p
    }
    ans := math.MaxInt
    for c := 0; c < n; c++ {
        ans = min(ans, dfs(n-1, c))
    }
    return ans
}

func min(a, b int) int { if b < a { return b }; return a }
```

* [sol-JavaScript]

```js
var minFallingPathSum = function (matrix) {
    const n = matrix.length;
    let memo = Array(n).fill(null).map(() => Array(n).fill(Number.MIN_SAFE_INTEGER));

    function dfs(r, c) {
        if (c < 0 || c >= n) return Number.MAX_SAFE_INTEGER; // 出界
        if (r === 0) return matrix[0][c]; // 到达第一行
        if (memo[r][c] !== Number.MIN_SAFE_INTEGER) return memo[r][c]; // 之前算过了
        return memo[r][c] = Math.min(
            dfs(r - 1, c - 1), dfs(r - 1, c), dfs(r - 1, c + 1)) + matrix[r][c];
    }

    let ans = Number.MAX_SAFE_INTEGER;
    for (let c = 0; c < n; c++)
        ans = Math.min(ans, dfs(n - 1, c));
    return ans;
};
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n^2)$，其中 $n$ 为 $\textit{matrix}$ 的长度。动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题中状态个数等于 $\mathcal{O}(n^2)$，单个状态的计算时间为 $\mathcal{O}(1)$，所以动态规划的时间复杂度为 $\mathcal{O}(n^2)$。
- 空间复杂度：$\mathcal{O}(n^2)$。

## 四、1:1 翻译成递推

我们可以去掉递归中的「递」，只保留「归」的部分，即自底向上计算。

做法：

- $\textit{dfs}$ 改成 $f$ 数组；
- 递归改成循环（每个参数都对应一层循环）；
- 递归边界改成 $f$ 数组的初始值。

> 相当于之前是用递归去计算每个状态，现在是（按照某种顺序）枚举并计算每个状态。

具体来说，$f[r][c]$ 的含义和 $\textit{dfs}(r,c)$ 的含义是一致的，都表示从 $\textit{matrix}[r][c]$ 出发，向上走到第一排的路径最小和。

相应的递推式（状态转移方程）也和 $\textit{dfs}$ 的一致：

$$
f[r][c] =  \min(f[r-1][c-1],f[r-1][c],f[r-1][c+1]) + \textit{matrix}[r][c]
$$

但是，这种定义方式**没有状态能表示递归边界**，即 $c=-1$ 和 $c=n$ 的情况。

解决办法：在 $f$ 的最左边和最右边各增加一列状态，那么原有的状态就要全部向右偏移一位，把 $f[r][c]$ 改为 $f[r][c+1]$。

修改后 $f[r][c+1]$ 表示从 $\textit{matrix}[r][c]$ 出发，向上走到第一排的路径最小和。此时 $f[r][0]$ 和 $f[r][n+1]$ 就对应递归边界了。

修改后的递推式为

$$
f[r][c+1] = \min(f[r-1][c],f[r-1][c+1],f[r-1][c+2]) + \textit{matrix}[r][c]
$$

> 注：另外一种写法是 $c$ 从 $1$ 开始遍历，从而避免数组越界，即 $f[r][c] =  \min(f[r-1][c-1],f[r-1][c],f[r-1][c+1]) + \textit{matrix}[r][c-1]$。

初始值 $f[0][c+1]=\textit{matrix}[0][c], f[r][0]=f[r][n+1]=\infty$。

答案为所有 $f[n-1][c]$ 的最小值。

* [sol-Python3]

```py
class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        f = [[inf] * (n + 2) for _ in range(n)]
        f[0][1: n + 1] = matrix[0]
        for r in range(1, n):
            for c in range(n):
                f[r][c + 1] = min(f[r - 1][c], f[r - 1][c + 1], f[r - 1][c + 2]) + matrix[r][c]
        return min(f[-1])
```

* [sol-Java]

```java
class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        var f = new int[n][n + 2];
        System.arraycopy(matrix[0], 0, f[0], 1, n);
        for (int r = 1; r < n; r++) {
            f[r - 1][0] = f[r - 1][n + 1] = Integer.MAX_VALUE;
            for (int c = 0; c < n; c++)
                f[r][c + 1] = Math.min(Math.min(f[r - 1][c], f[r - 1][c + 1]), f[r - 1][c + 2]) + matrix[r][c];
        }
        int ans = Integer.MAX_VALUE;
        for (int c = 1; c <= n; c++)
            ans = Math.min(ans, f[n - 1][c]);
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int minFallingPathSum(vector<vector<int>> &matrix) {
        int n = matrix.size(), f[n][n + 2];
        memset(f, 0x3f, sizeof(f));
        for (int i = 0; i < n; i++)
            f[0][i + 1] = matrix[0][i];
        for (int r = 1; r < n; r++)
            for (int c = 0; c < n; c++)
                f[r][c + 1] = min(min(f[r - 1][c], f[r - 1][c + 1]), f[r - 1][c + 2]) + matrix[r][c];
        return *min_element(f[n - 1] + 1, f[n - 1] + 1 + n);
    }
};
```

* [sol-Go]

```go
func minFallingPathSum(matrix [][]int) int {
    n := len(matrix)
    f := make([][]int, n)
    for i := range f {
        f[i] = make([]int, n+2)
        f[i][0], f[i][n+1] = math.MaxInt, math.MaxInt
    }
    copy(f[0][1:], matrix[0])
    for r := 1; r < n; r++ {
        for c, x := range matrix[r] {
            f[r][c+1] = min(min(f[r-1][c], f[r-1][c+1]), f[r-1][c+2]) + x
        }
    }
    ans := math.MaxInt
    for _, x := range f[n-1] {
        ans = min(ans, x)
    }
    return ans
}

func min(a, b int) int { if b < a { return b }; return a }
```

* [sol-JavaScript]

```js
var minFallingPathSum = function (matrix) {
    const n = matrix.length, inf = Number.MAX_SAFE_INTEGER;
    let f = Array(n).fill(null).map(() => Array(n + 2).fill(inf));
    f[0] = [inf, ...matrix[0], inf];
    for (let r = 1; r < n; r++)
        for (let c = 0; c < n; c++)
            f[r][c + 1] = Math.min(f[r - 1][c], f[r - 1][c + 1], f[r - 1][c + 2]) + matrix[r][c];
    return Math.min(...f[n - 1]); // 也可以 _.min(f[n - 1]);
};
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n^2)$，其中 $n$ 为 $\textit{matrix}$ 的长度。动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题中状态个数等于 $\mathcal{O}(n^2)$，单个状态的计算时间为 $\mathcal{O}(1)$，所以动态规划的时间复杂度为 $\mathcal{O}(n^2)$。
- 空间复杂度：$\mathcal{O}(n^2)$。

## 五、空间优化

观察上面的状态转移方程，在计算 $f[r][\cdot]$ 时，只会用到上一排的 $f[r-1][\cdot]$，不会用到 $< r-1$ 的状态。

因此可以像 [0-1 背包](https://www.bilibili.com/video/BV16Y411v7Y6/) 那样，反复利用同一个长为 $n+2$ 的一维数组。

状态转移方程改为

$$
f[c+1] = \min(f[c],f[c+1],f[c+2]) + \textit{matrix}[r][c]
$$

注意这里 $f[c]$ 必须是上一排算出的，为避免它被当前排覆盖，可以用一个变量 $\textit{pre}$ 暂存。

* [sol-Python3]

```py
class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        f = [inf] + matrix[0] + [inf]
        for row in matrix[1:]:
            pre = f[0]  # 充当 f[c]
            for c, x in enumerate(row):
                pre, f[c + 1] = f[c + 1], min(pre, f[c + 1], f[c + 2]) + x
        return min(f)
```

* [sol-Java]

```java
class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        var f = new int[n + 2];
        f[0] = f[n + 1] = Integer.MAX_VALUE;
        System.arraycopy(matrix[0], 0, f, 1, n);
        for (int r = 1; r < n; r++) {
            int pre = f[0];
            for (int c = 0; c < n; c++) {
                int tmp = pre;
                pre = f[c + 1];
                f[c + 1] = Math.min(tmp, Math.min(f[c + 1], f[c + 2])) + matrix[r][c];
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int c = 1; c <= n; c++)
            ans = Math.min(ans, f[c]);
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int minFallingPathSum(vector<vector<int>> &matrix) {
        int n = matrix.size(), f[n + 2];
        f[0] = f[n + 1] = INT_MAX;
        for (int i = 0; i < n; i++)
            f[i + 1] = matrix[0][i];
        for (int r = 1; r < n; r++) {
            int pre = f[0];
            for (int c = 0; c < n; c++) {
                int tmp = pre;
                pre = f[c + 1];
                f[c + 1] = min(tmp, min(f[c + 1], f[c + 2])) + matrix[r][c];
            }
        }
        return *min_element(f + 1, f + 1 + n);
    }
};
```

* [sol-Go]

```go
func minFallingPathSum(matrix [][]int) int {
    f := append(append([]int{math.MaxInt}, matrix[0]...), math.MaxInt)
    for _, row := range matrix[1:] {
        pre := f[0]
        for c, x := range row {
            pre, f[c+1] = f[c+1], min(pre, min(f[c+1], f[c+2]))+x
        }
    }
    ans := math.MaxInt
    for _, x := range f {
        ans = min(ans, x)
    }
    return ans
}

func min(a, b int) int { if b < a { return b }; return a }
```

* [sol-JavaScript]

```js
var minFallingPathSum = function (matrix) {
    const n = matrix.length, inf = Number.MAX_SAFE_INTEGER;
    let f = [inf, ...matrix[0], inf];
    for (let r = 1; r < n; r++) {
        let pre = f[0];
        for (let c = 0; c < n; c++)
            [pre, f[c + 1]] = [f[c + 1], Math.min(pre, f[c + 1], f[c + 2]) + matrix[r][c]];
    }
    return Math.min(...f); // 也可以 _.min(f);
};
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n^2)$，其中 $n$ 为 $\textit{matrix}$ 的长度。动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题中状态个数等于 $\mathcal{O}(n^2)$，单个状态的计算时间为 $\mathcal{O}(1)$，所以动态规划的时间复杂度为 $\mathcal{O}(n^2)$。
- 空间复杂度：$\mathcal{O}(n)$。

## 练习 1

- [62. 不同路径](https://leetcode.cn/problems/unique-paths/)
- [63. 不同路径 II](https://leetcode.cn/problems/unique-paths-ii/)
- [64. 最小路径和](https://leetcode.cn/problems/minimum-path-sum/)
- [120. 三角形最小路径和](https://leetcode.cn/problems/triangle/)
- [2684. 矩阵中移动的最大次数](https://leetcode.cn/problems/maximum-number-of-moves-in-a-grid/)
- [1301. 最大得分的路径数目](https://leetcode.cn/problems/number-of-paths-with-max-score/)

## 练习 2

- [329. 矩阵中的最长递增路径](https://leetcode.cn/problems/longest-increasing-path-in-a-matrix/)
- [2328. 网格图中递增路径的数目](https://leetcode.cn/problems/number-of-increasing-paths-in-a-grid/)

## 练习 3

- [1289. 下降路径最小和 II](https://leetcode.cn/problems/minimum-falling-path-sum-ii/)
- [2435. 矩阵中和能被 K 整除的路径](https://leetcode.cn/problems/paths-in-matrix-whose-sum-is-divisible-by-k/)
- [741. 摘樱桃](https://leetcode.cn/problems/cherry-pickup/)
- [1463. 摘樱桃 II](https://leetcode.cn/problems/cherry-pickup-ii/)

[往期每日一题题解（按 tag 分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
