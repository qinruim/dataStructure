    public static void dfs(StringBuilder str,String digits,int i,List<String> result){
        char c;
        if (i<digits.length()) {
            c = digits.charAt(i);
            switch (c) {
                case '2':
                    for (int j = 0; j < c2.length; j++) {
                        str.append(c2[j]);
                        dfs(str, digits, i + 1,result);
                        str.delete(i,str.length());
                    }
                    break;
                case '3':
                    for (int j = 0; j < c3.length; j++) {
                        str.append(c3[j]);
                        dfs(str, digits, i + 1,result);
                        str.delete(i,str.length());
                    }
                    break;
                case '4':
                    for (int j = 0; j < c4.length; j++) {
                        str.append(c4[j]);
                        dfs(str, digits, i + 1,result);
                        str.delete(i,str.length());
                    }
                    break;
                case '5':
                    for (int j = 0; j < c5.length; j++) {
                        str.append(c5[j]);
                        dfs(str, digits, i + 1,result);
                        str.delete(i,str.length());
                    }
                    break;
                case '6':
                    for (int j = 0; j < c6.length; j++) {
                        str.append(c6[j]);
                        dfs(str, digits, i + 1,result);
                        str.delete(i,str.length());
                    }
                    break;
                case '7':
                    for (int j = 0; j < c7.length; j++) {
                        str.append(c7[j]);
                        dfs(str, digits, i + 1,result);
                        str.delete(i,str.length());
                    }
                    break;
                case '8':
                    for (int j = 0; j < c8.length; j++) {
                        str.append(c8[j]);
                        dfs(str, digits, i + 1,result);
                        str.delete(i,str.length());
                    }
                    break;
                case '9':
                    for (int j = 0; j < c9.length; j++) {
                        str.append(c9[j]);
                        dfs(str, digits, i + 1,result);
                        str.delete(i,str.length());
                    }
                    break;
    
            }
    
        }
        else if (i!=0)
            result.add(str.toString());
    
    }

}
