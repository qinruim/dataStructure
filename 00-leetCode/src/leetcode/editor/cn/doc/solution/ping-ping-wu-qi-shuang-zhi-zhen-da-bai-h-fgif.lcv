## 双指针

令 `l` 为符合条件的子串的左端点，`r` 为符合条件的子串的右端点。

使用 `cnt` 统计 `[l,r]` 范围的子串中每个字符串出现的次数。

对于合法的子串而言，必然有 `sum(所有字符的出现次数) - max(出现次数最多的字符的出现次数）= other(其他字符的出现次数) <= k`。

当找到这样的性质之后，我们可以对 `s` 进行遍历，每次让 `r` 右移并计数，如果符合条件，更新最大值；如果不符合条件，让 `l` 右移，更新计数，直到符合条件。

代码：

* []

```Java
class Solution {
    public int characterReplacement(String s, int k) {
        char[] cs = s.toCharArray();
        int[] cnt = new int[26];
        int ans = 0;
        for (int l = 0, r = 0; r < s.length(); r++) {
            // cnt[cs[r] - 'A']++;
            int cur = cs[r] - 'A';
            cnt[cur]++;
            // while (!check(cnt, k)) cnt[cs[l++] - 'A']--; 
            while (!check(cnt, k)) {
                int del = cs[l] - 'A';
                cnt[del]--;
                l++;
            }     
            ans = Math.max(ans, r - l + 1);
        }
        return ans;
    }
    boolean check(int[] cnt, int k) {
        int max = 0, sum = 0;
        for (int i = 0; i < 26; i++) {
            max = Math.max(max, cnt[i]);
            sum += cnt[i];
        }
        return sum - max <= k;
    }
}
```

* 时间复杂度：使用 `l` 和 `r` 指针对 `s` 进行单次扫描，复杂度为 $O(n)$；`check` 方法是对长度固定的数组进行扫描，复杂度为 $O(1)$。整体复杂度为 $O(n)$。
* 空间复杂度：使用了固定长度的数组进行统计。复杂度为 $O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解
